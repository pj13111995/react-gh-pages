{"version":3,"sources":["components/test.jsx","components/counter.jsx","components/counters.jsx","components/navbar.jsx","components/payment.jsx","App.js","serviceWorker.js","index.js"],"names":["Component","Counter","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","prevProps","prevState","value","props","_this2","_this$props","onincrement","ondelete","id","react_default","a","createElement","style","fontSize","className","getBadgeClass","formatCount","onClick","price","classes","Counters","onreset","counter","onAddCounters","map","components_counter","key","NavBar","_ref","length","href","Payment","Fragment","Pager","Item","App","componentDidMount","state","counters","totalPrice","total","deleteCounter","filter","c","setState","resetState","reset","incrementCount","counterClone","toConsumableArray","index","indexOf","addCounter","push","navbar","role","payment","finalCount","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69c39e87.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Nav, NavItem, NavDropdown, MenuItem } from \"react-bootstrap\";\r\nclass Test extends Component {\r\n  state = {};\r\n  render = () => <div>Hi</div>;\r\n}\r\n\r\nexport default Test;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  //   constructor() {\r\n  //     super();\r\n  //     this.buttonClicked.bind(this);\r\n  //   }\r\n\r\n  //   style = {\r\n  //     fontSize: 10,\r\n  //     fontWeight: \"bold\"\r\n  //   };\r\n  constructor() {\r\n    super();\r\n    console.log(\"Constructor(Counter)-Enabled\");\r\n  }\r\n  componentDidMount() {\r\n    //Ajax call\r\n    console.log(\"componentDidMount-Enabled(Counter)\");\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.value != this.props.value) {\r\n      console.log(\"prop changed\"); //Ajax update\r\n    }\r\n  }\r\n  componentWillUnmount() {\r\n    console.log(\"componentWillUnmount-Enabled\");\r\n  }\r\n  render() {\r\n    console.log(\"Render(Counter)-Enabled\");\r\n    const { onincrement, ondelete, id } = this.props;\r\n    return (\r\n      <div>\r\n        <span style={{ fontSize: 10 }} className={this.getBadgeClass()}>\r\n          {this.formatCount()}\r\n        </span>\r\n        <button\r\n          onClick={() => onincrement(this)}\r\n          className=\"btn btn-secondary btn-md\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => ondelete(id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n        <span className=\"badge badge-primary\">Price:${this.props.price}</span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClass() {\r\n    let classes = \"badge m-2  badge-\";\r\n    classes += this.props.value === 0 ? \"warning\" : \"primary\";\r\n\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    return this.props.value === 0 ? <h4>Zero</h4> : this.props.value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n  constructor() {\r\n    super();\r\n    console.log(\"Constructor(Counters)-Enabled\");\r\n  }\r\n  componentDidMount() {\r\n    //Ajax call\r\n    console.log(\"componentDidMount-Enabled(Counters)\");\r\n  }\r\n  render() {\r\n    console.log(\"Render(Counters)-Enabled\");\r\n    const {\r\n      onreset,\r\n      ondelete,\r\n      onincrement,\r\n      value,\r\n      id,\r\n      counter,\r\n      onAddCounters\r\n    } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onreset} className=\"btn btn-primary btn-sm\">\r\n          Reset\r\n        </button>\r\n        <button onClick={onAddCounters} className=\"btn btn-primary btn-sm m-2\">\r\n          Add\r\n        </button>\r\n        {counter.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            value={counter.value}\r\n            ondelete={() => ondelete(counter.id)}\r\n            onincrement={() => onincrement(counter)}\r\n            price={counter.price}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\r\n//Stateless functional components\r\nconst NavBar = ({ length }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar\r\n        <span className=\"badge badge-pill badge-secondary m-2\">{length}</span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport { Pager } from \"react-bootstrap\";\r\nclass Payment extends Component {\r\n  render() {\r\n    let total = 0;\r\n    console.log(this.props);\r\n    return (\r\n      <React.Fragment>\r\n        {/* {this.props.finalCount.map(count => {\r\n          total += count.totalPrice;\r\n        })}\r\n        <p>Total Price:{total}</p> */}\r\n\r\n        <Pager>\r\n          <Pager.Item href=\"#\">Previous</Pager.Item>{\" \"}\r\n          <Pager.Item href=\"#\">Next</Pager.Item>\r\n        </Pager>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Payment;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Counters from \"./components/counters\";\nimport NavBar from \"./components/navbar\";\nimport Payment from \"./components/payment\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    console.log(\"Constructor(App)-Enabled\");\n  }\n  componentDidMount = () =>\n    //Ajax call\n    console.log(\"componentDidMount-Enabled(App)\");\n\n  state = {\n    counters: [\n      { id: 1, value: 0, price: 100, totalPrice: 0 },\n      { id: 2, value: 0, price: 200, totalPrice: 0 },\n      { id: 3, value: 0, price: 300, totalPrice: 0 },\n      { id: 4, value: 0, price: 400, totalPrice: 0 }\n    ],\n    total: 0\n  };\n  deleteCounter = id => {\n    const counters = this.state.counters.filter(c => c.id !== id);\n    this.setState({ counters: counters });\n  };\n  resetState = () => {\n    const reset = this.state.counters.map(c => {\n      c.value = 0;\n      c.totalPrice = 0;\n      return c;\n    });\n\n    this.setState({ counters: reset });\n  };\n  incrementCount = counter => {\n    const counterClone = [...this.state.counters];\n    const index = counterClone.indexOf(counter);\n    counterClone[index].value += 1;\n    counterClone[index].totalPrice =\n      counterClone[index].value * counterClone[index].price;\n\n    this.setState({ counters: counterClone });\n  };\n  addCounter = () => {\n    let counterClone = [...this.state.counters];\n    counterClone.push({\n      id: counterClone.length + 1,\n      value: 0,\n      price: 400,\n      totalPrice: 0\n    });\n    this.setState({ counters: counterClone });\n  };\n  render() {\n    console.log(\"Render(App)-Enabled\");\n    return (\n      <React.Fragment>\n        <NavBar\n          length={this.state.counters.filter(c => c.value !== 0).length}\n        />\n        <main role=\"main\" className=\"container\">\n          <Counters\n            ondelete={this.deleteCounter}\n            onincrement={this.incrementCount}\n            onreset={this.resetState}\n            counter={this.state.counters}\n            onAddCounters={this.addCounter}\n          />\n          <Payment finalCount={this.state.counters} />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Test from \"./components/test\";\nimport App from \"./App\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// ReactDOM.render(<Test />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}